<?php
// $Id: taxonomy_service.module,v 1.4.2.9.2.4 2010/02/28 01:15:31 heyrocker Exp $
/**
 * @file
 *  Link general taxonomy functionalities to services module.
 */

/**
  * hook_autoload_info - 
  */
function taxonomy_resource_autoload_info() {
  return array(
    'TaxonomyResourceFeedModel' => array(
      'file' => 'taxonomy_resource.models.inc',
    ),
    'TaxonomyResourceViewFeedModel' => array(
      'file' => 'taxonomy_resource.models.inc',
    ),
  );
}

function _taxonomy_resource_access($op = 'view', $args = array()) {
  // if ($op != 'create' && !empty($args)) {
  //   $node = node_load($args[0]);
  // }
  // return node_access($op, $node);
}

function taxonomy_resource_services_resources() {
  return array(
    'taxonomy' => array(
      'file' => array('type' => 'inc', 'module' => 'taxonomy_resource'),
      'retrieve' => array(
        'callback' => '_taxonomy_resource_retrieve',
        'args' => array(
          array(
            'name' => 'tid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The tid of the taxonomy to get',
          ),
        ),
        // 'models' => array(
        //   'ResourceFeedModel' => array(
        //     'class' => 'TaxonomyResourceFeedModel',
        //     'arguments' => array('source' => 'single'),
        //   ),
        // ),
        'access callback' => '_taxonomy_resource_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      ),
      'create' => array(
        'callback' => '_taxonomy_resource_create',
        'args' => array(
          array(
            'name' => 'node',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The taxonomuy object to create',
            'type' => 'struct',
          ),
        ),
        'access callback' => '_taxonomy_resource_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'callback' => '_taxonomy_resource_update',
        'args' => array(
          array(
            'name' => 'node',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The taxonomy data to update',
            'type' => 'struct',
          ),
        ),
        'access callback' => '_taxonomy_resource_access',
        'access arguments' => array('update'),
        'access arguments append' => TRUE,
      ),
      'delete' => array(
        'callback' => '_taxonomy_resource_delete',
        'args' => array(
          array(
            'name' => 'nid',
            'optional' => FALSE,
            'source' => array('path' => 0),
          ),
        ),
        'access callback' => '_taxonomy_resource_access',
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
      ),
      'index' => array(
        'callback' => '_node_resource_index',
        'args' => array(
          array(
            'name' => 'page',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The zero-based index of the page to get, defaults to 0.',
            'default value' => 0,
            'source' => array('param' => 'page'),
          ),
          array(
            'name' => 'fields',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'The fields to get.',
            'default value' => '',
            'source' => array('param' => 'fields'),
          ),
          array(
            'name' => 'parameters',
            'optional' => TRUE,
            'type' => 'struct',
            'description' => 'Parameters',
            'default value' => NULL,
            'source' => 'param',
          ),
        ),
        'models' => array(
          'ResourceFeedModel' => array(
            'class' => 'NodeResourceFeedModel',
          ),
          'ResourceTimeFeedModel' => array(
            'class' => 'NodeResourceFeedModel',
          ),
        ),
        'access arguments' => array('access content'),
        'access arguments append' => TRUE,
      ),
    ),
  );
}

